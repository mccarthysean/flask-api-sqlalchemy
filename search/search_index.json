{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"flask-api-sqlalchemy","text":"<p>A Flask extension that automatically generates RESTful APIs from SQLAlchemy models.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simple integration with existing Flask and SQLAlchemy applications</li> <li>Automatic discovery of SQLAlchemy models</li> <li>Automatic mapping of SQLAlchemy types to Flask-RESTX API model types</li> <li>Fully generated REST endpoints for all models</li> <li>Comprehensive test suite</li> <li>Interactive Swagger UI documentation</li> <li>Command-line scaffolding tool for quick setup</li> </ul>"},{"location":"#installation-for-your-project","title":"Installation for Your Project","text":"<p>Install from PyPI</p> <pre><code>pip install flask-api-sqlalchemy\n</code></pre>"},{"location":"#installation-for-development","title":"Installation for Development","text":"<pre><code>pip install -e .\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_api_sqlalchemy import Api\n\n# Create Flask application\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\n\n# Initialize SQLAlchemy\ndb = SQLAlchemy(app)\n\n# Define your SQLAlchemy models\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n# Initialize the API extension\napi = Api()\napi.init_app(app, db)\n\nif __name__ == '__main__':\n    app.run()\n</code></pre> <p>That's it! The extension automatically: 1. Discovers all your SQLAlchemy models 2. Creates appropriate Flask-RESTX models and serializers 3. Generates full CRUD API endpoints for each model 4. Provides Swagger documentation at <code>/api/docs</code></p>"},{"location":"#how-it-works","title":"How It Works","text":"<p><code>flask-api-sqlalchemy</code> analyzes your SQLAlchemy models and automatically creates REST API endpoints with appropriate data validation:</p> <ol> <li>Model Discovery: The extension finds all SQLAlchemy models in your application</li> <li>Type Mapping: SQLAlchemy column types are mapped to appropriate Flask-RESTX field types</li> <li>API Generation: CRUD endpoints are created for each model with proper validation</li> <li>Documentation: Swagger UI is automatically generated for testing and exploration</li> </ol>"},{"location":"#detailed-usage","title":"Detailed Usage","text":""},{"location":"#model-relationships","title":"Model Relationships","text":"<p>The extension supports models with relationships:</p> <pre><code>class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\nclass Item(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    user = db.relationship('User', backref='items')\n</code></pre>"},{"location":"#generated-endpoints","title":"Generated Endpoints","text":"<p>For each model, the following RESTful endpoints are automatically created:</p> HTTP Method Endpoint Description Status Codes GET /api/{models}/ List all resources 200 OK POST /api/{models}/ Create a new resource 201 Created, 400 Bad Request GET /api/{models}/{id} Get a specific resource 200 OK, 404 Not Found PUT /api/{models}/{id} Update a specific resource 200 OK, 404 Not Found DELETE /api/{models}/{id} Delete a specific resource 204 No Content, 404 Not Found"},{"location":"#command-line-interface","title":"Command-Line Interface","text":"<p>This extension includes a helpful CLI for setting up new projects:</p> <pre><code># Create a new Flask application with flask-api-sqlalchemy\nflask-api-sqlalchemy scaffold --dir myapp\n\n# Show information about models in an existing application\nflask-api-sqlalchemy info app:app\n</code></pre>"},{"location":"#type-mapping","title":"Type Mapping","text":"<p>SQLAlchemy column types are automatically mapped to appropriate Flask-RESTX fields:</p> SQLAlchemy Type Flask-RESTX Field Integer fields.Integer String fields.String Text fields.String Boolean fields.Boolean Date fields.Date DateTime fields.DateTime Float fields.Float ... and many more"},{"location":"#configuration-options","title":"Configuration Options","text":"<p>Configure the extension through Flask application config:</p> <pre><code>app.config['API_TITLE'] = \"My Custom API\"  # Default: \"Flask-SQLAlchemy API\"\napp.config['API_DESCRIPTION'] = \"Custom description\"  # Default: \"Automatically generated API from SQLAlchemy models\"\n</code></pre>"},{"location":"#data-validation","title":"Data Validation","text":"<p>The extension automatically validates incoming data:</p> <ul> <li>Required fields (non-nullable columns) are enforced</li> <li>Data types are validated according to SQLAlchemy column types</li> <li>Helpful error messages are returned for invalid data</li> </ul>"},{"location":"#troubleshooting","title":"Troubleshooting","text":""},{"location":"#no-models-found","title":"No Models Found","text":"<p>If no models are discovered, ensure: - Your models inherit from <code>db.Model</code> - Models are imported before initializing the API - The db instance passed to <code>api.init_app()</code> is the same one used to define your models</p>"},{"location":"#missing-endpoints","title":"Missing Endpoints","text":"<p>Check that: - The Flask blueprint is registered correctly (happens automatically in <code>init_app()</code>) - Your app context is active when accessing endpoints - Names are correctly pluralized in the URL (e.g., <code>/api/users/</code> not <code>/api/user/</code>)</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Sean McCarthy</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"#author-info","title":"Author Info","text":"<p>Sean McCarthy is Chief Data Scientist at IJACK Technologies Inc, a leading manufacturer of fully-automated pumps to green the oil and gas industry.</p> <p> </p>"}]}